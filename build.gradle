import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

plugins {
    id 'com.vanniktech.maven.publish' version '0.34.0'
    id 'jacoco-report-aggregation'
    id 'org.jetbrains.dokka' version '2.1.0'
    id 'org.jetbrains.kotlin.jvm' version '2.1.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.10'
    id 'org.jlleitschuh.gradle.ktlint' version '13.1.0'
    id 'org.sonarqube' version '7.0.0.6105'
    id 'pl.allegro.tech.build.axion-release' version '1.21.0'
}

repositories {
    mavenCentral()
}

ext {
    kotlinVersion = '2.1.10'
    coroutinesVersion = '1.10.1'
    kotestVersion = '5.9.1'
}

dependencies {
    implementation project(':transgressoft-commons-api')
    implementation project(':transgressoft-commons-core')
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
}

kotlin {
    jvmToolchain(17)
}

tasks.named('jar') {
    enabled = false
}

scmVersion {
    tag {
        prefix = ''
        initialVersion { t, p -> '1.0.0' }
    }
    useHighestVersion = true
    ignoreUncommittedChanges = false
    versionIncrementer 'incrementMinor'
}

tasks.withType(PublishToMavenLocal) {
    onlyIf { project != rootProject }
}

version = scmVersion.version
description = 'A reactive library for Kotlin & Java projects that implements the Publisher-Subscriber pattern.'

sonar {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'transgressoft'
        property 'sonar.projectKey', 'net.transgressoft:transgressoft-commons'
        property 'sonar.projectName', 'transgressoft-commons'
        property 'sonar.projectVersion', version
        property 'sonar.junit.reportPaths', 'build/test-results/test'
        def buildDir = project.layout.buildDirectory.get().asFile.absolutePath
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport')
}

subprojects {

    apply plugin: 'com.vanniktech.maven.publish'
    apply plugin: 'jacoco'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'org.sonarqube'

    group = 'net.transgressoft'
    project.version = rootProject.version

    dependencies {
        implementation platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion")
        api platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$coroutinesVersion")
        api 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    }

    repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }

    afterEvaluate {
        tasks.named('generateMetadataFileForMavenPublication') {
            dependsOn tasks.named('dokkaJavadocJar')
        }
    }

    kotlin {
        jvmToolchain(17)
    }

    tasks.withType(KotlinJvmCompile).configureEach {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
            freeCompilerArgs.add('-Xjsr305=strict')
        }
    }

    sonar {
        properties {
            property 'sonar.moduleKey', "${project.name}"
            property 'sonar.sources', 'src/main'
            property 'sonar.exclusions', 'src/test/**'
        }
    }

    ktlint {
        reporters {
            reporter(ReporterType.HTML)
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    jacocoTestReport {
        reports {
            xml.required.set true
            html.required = true
        }
    }

    mavenPublishing {
        publishToMavenCentral()
        coordinates("${project.group}", "${project.name}", "${project.version}")
        pom {
            name = "${project.name}"
            description = project.description
            url = 'https://github.com/octaviospain/transgressoft-commons'
            inceptionYear = '2025'

            licenses {
                license {
                    name = 'GNU General Public License v3'
                    url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                }
            }

            developers {
                developer {
                    id = 'transgressoft'
                    name = 'Octavio Calleya Garcia'
                    email = 'octavio@transgressoft.net'
                    organization = 'transgressoft'
                    organizationUrl = 'https://transgressoft.net'
                }
            }

            scm {
                connection = 'scm:git:git://github.com/octaviospain/transgressoft-commons.git'
                developerConnection = 'scm:git:ssh://github.com:octaviospain/transgressoft-commons.git'
                url = 'https://github.com/octaviospain/transgressoft-commons/tree/master'
            }
        }
        signAllPublications()
    }
}
